import h from '@gera2ld/jsx-dom';
import {
  格子大小,
  主体,
  延迟,
  随机数,
  取整,
  样式,
  运动时间属性,
  变换属性,
  平移,
  初始值,
  像素,
  长度,
} from './util';
import './style.css';

const 容器 = <div className="block-area" />;
const 按钮 = <button onClick={刷新}>重来</button>;
主体.附加(容器, 按钮);

function 随机生成块块(大小, 数量) {
  const 总数 = 大小 * 大小;
  const 块块 = [];
  let 剩余数量 = 数量;
  for (let 序号 = 0; 序号 < 总数; 序号 += 1) {
    if (随机数() < 剩余数量 / (总数 - 序号)) {
      块块.塞进去({
        行: 取整(序号 / 大小),
        列: 序号 % 大小,
      });
      剩余数量 -= 1;
    }
  }
  return 块块;
}

function 渲染(块块, 大小) {
  const 尺寸 = `${大小 * 格子大小}${像素}`;
  容器.style.width = 尺寸;
  容器.style.height = 尺寸;
  容器.innerHTML = '';
  块块.遍历((每块, 序号) => {
    每块.元素 = (
      <div className="block">
        {序号}
      </div>
    );
    容器.附加(每块.元素);
  });
}

function 更新(块块) {
  块块.遍历(({
    元素, 行, 列, 运动时间,
  }) => {
    元素[样式][运动时间属性] = 运动时间 || 初始值;
    元素[样式][变换属性] = `${平移}(${列 * 格子大小}${像素},${行 * 格子大小}${像素})`;
  });
}

function 按列分组(块块们, 大小) {
  return 块块们.合起来(
    (结果, 每块) => {
      结果[每块.列].塞进去(每块);
      return 结果;
    },
    Array.from({ [长度]: 大小 }, () => []),
  );
}

function 获取移动序列(块块们, 大小) {
  const 移动序列 = [];
  const 列们 = 按列分组(块块们, 大小);
  列们.遍历((每列) => {
    每列.遍历((每块, 序号) => {
      const 期望的行 = 序号 + 大小 - 每列[长度];
      if (期望的行 !== 每块.行) {
        移动序列.塞进去({
          块: 每块,
          期望的行,
        });
      }
    });
  });
  return 移动序列;
}

async function 刷新() {
  const 大小 = 4;
  const 块块 = 随机生成块块(大小, (0.2 + 0.5 * 随机数()) * 大小 * 大小);
  渲染(块块, 大小);
  更新(块块);
  const 需要更新 = 获取移动序列(块块, 大小);
  需要更新.遍历(({ 块, 期望的行 }) => {
    块.运动时间 = `${0.5 * (期望的行 - 块.行)}s`;
    块.行 = 期望的行;
  });
  await 延迟();
  更新(块块);
}

刷新();
